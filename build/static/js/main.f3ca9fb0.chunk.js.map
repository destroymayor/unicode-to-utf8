{"version":3,"sources":["components/clipboard/clipboard.js","components/transformItem/transformItem.js","utils/unicodeToChar.js","page/index.js","serviceWorker.js","index.js"],"names":["props","clipboard","useClipboard","copiedTimeout","useEffect","decodeValue","copied","message","success","handleClipboard","useCallback","copy","icon","onClick","class","className","unicodeToChar","charToUnicode","text","replace","match","String","fromCharCode","parseInt","theString","unicodeString","i","length","theUnicode","charCodeAt","toString","toUpperCase","TextArea","Input","App","useState","encodeValue","setEncodeValue","setDecodeValue","target","rel","href","placeholder","rows","value","onChange","e","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sPAIe,WAAAA,GACb,IAAMC,EAAYC,uBAAa,CAAEC,cAAe,MAEhDC,qBAAU,WACkB,KAAtBJ,EAAMK,aACRJ,EAAUK,QAAUC,IAAQC,QAAR,mCAA4CR,EAAMK,gBAEvE,CAACJ,EAAUK,OAAQN,EAAMK,cAE5B,IAAMI,EAAkBC,uBAAY,WAClCT,EAAUU,KAAKX,EAAMK,eACpB,CAACJ,EAAWD,EAAMK,cAErB,OACE,kBAAC,IAAD,CAAQO,KAAK,OAAOC,QAASJ,GAA7B,SCbW,G,OAAA,SAAAT,GACb,OACE,yBAAKc,MAAM,iBACT,kBAAC,IAAD,CAAQC,UAAU,oBAAoBF,QAASb,EAAMgB,cAAeJ,KAAK,cAAzE,aAGA,kBAAC,IAAD,CAAQG,UAAU,oBAAoBF,QAASb,EAAMiB,cAAeL,KAAK,YAAzE,iBCXAI,EAAgB,SAAAE,GACpB,OAAOA,EAAKC,QAAQ,mBAAmB,SAAAC,GACrC,OAAOC,OAAOC,aAAaC,SAASH,EAAMD,QAAQ,OAAQ,IAAK,SAI7DF,EAAgB,SAAAO,GAEpB,IADA,IAAIC,EAAgB,GACXC,EAAI,EAAGA,EAAIF,EAAUG,OAAQD,IAAK,CAKzC,IAJA,IAAIE,EAAaJ,EACdK,WAAWH,GACXI,SAAS,IACTC,cACIH,EAAWD,OAAS,GACzBC,EAAa,IAAMA,EAGrBH,GADAG,EAAa,MAAQA,EAGvB,OAAOH,GCVDO,EAAaC,IAAbD,SAmCOE,MAhCf,WAAgB,IAAD,EACyBC,mBAAS,IADlC,mBACNC,EADM,KACOC,EADP,OAEyBF,mBAAS,IAFlC,mBAEN9B,EAFM,KAEOiC,EAFP,KAIb,OACE,yBAAKvB,UAAU,OACb,uBAAGA,UAAU,cAAcwB,OAAO,SAASC,IAAI,sBAAsBC,KAAK,mDAA1E,UAGA,kBAACT,EAAD,CACEjB,UAAU,YACV2B,YAAa,gBACbC,KAAM,EACNC,MAAOR,EACPS,SAAU,SAAAC,GAAC,OAAIT,EAAeS,EAAEP,OAAOK,UAEzC,kBAAC,EAAD,CACE5B,cAAe,kBAAMsB,EAAetB,EAAcoB,KAClDnB,cAAe,kBAAMoB,EAAepB,EAAcZ,OAEpD,kBAAC2B,EAAD,CACEjB,UAAU,YACV2B,YAAa,SACbC,KAAM,EACNC,MAAOvC,EACPwC,SAAU,SAAAC,GAAC,OAAIR,EAAeQ,EAAEP,OAAOK,UAEzC,kBAAC,EAAD,CAAiBvC,YAAaA,MC3BhB0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS9B,MACvB,2DCZN+B,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.f3ca9fb0.chunk.js","sourcesContent":["import React, { useEffect, useCallback } from \"react\";\nimport { Button, message } from \"antd\";\nimport { useClipboard } from \"use-clipboard-copy\";\n\nexport default props => {\n  const clipboard = useClipboard({ copiedTimeout: 600 });\n\n  useEffect(() => {\n    if (props.decodeValue !== \"\") {\n      clipboard.copied && message.success(`Your clipboard contains: ${props.decodeValue}`);\n    }\n  }, [clipboard.copied, props.decodeValue]);\n\n  const handleClipboard = useCallback(() => {\n    clipboard.copy(props.decodeValue);\n  }, [clipboard, props.decodeValue]);\n\n  return (\n    <Button icon=\"copy\" onClick={handleClipboard}>\n      Copy\n    </Button>\n  );\n};\n","import React from \"react\";\nimport \"components/transformItem/transformItem.css\";\n\nimport { Button } from \"antd\";\n\nexport default props => {\n  return (\n    <div class=\"transformItem\">\n      <Button className=\"transformItem-btn\" onClick={props.unicodeToChar} icon=\"arrow-down\">\n        To String\n      </Button>\n      <Button className=\"transformItem-btn\" onClick={props.charToUnicode} icon=\"arrow-up\">\n        To Unicode\n      </Button>\n    </div>\n  );\n};\n","const unicodeToChar = text => {\n  return text.replace(/\\\\u[\\dA-F]{4}/gi, match => {\n    return String.fromCharCode(parseInt(match.replace(/\\\\u/g, \"\"), 16));\n  });\n};\n\nconst charToUnicode = theString => {\n  let unicodeString = \"\";\n  for (let i = 0; i < theString.length; i++) {\n    let theUnicode = theString\n      .charCodeAt(i)\n      .toString(16)\n      .toUpperCase();\n    while (theUnicode.length < 4) {\n      theUnicode = \"0\" + theUnicode;\n    }\n    theUnicode = \"\\\\u\" + theUnicode;\n    unicodeString += theUnicode;\n  }\n  return unicodeString;\n};\n\nexport { unicodeToChar, charToUnicode };\n","import React, { useState } from \"react\";\nimport \"page/index.css\";\n\nimport { Input } from \"antd\";\n\nimport ClipboardButton from \"components/clipboard/clipboard\";\nimport TransformItem from \"components/transformItem/transformItem\";\nimport { unicodeToChar, charToUnicode } from \"utils/unicodeToChar\";\n\nconst { TextArea } = Input;\n\n// \\u4e0a\\u6d77\nfunction App() {\n  const [encodeValue, setEncodeValue] = useState(\"\");\n  const [decodeValue, setDecodeValue] = useState(\"\");\n\n  return (\n    <div className=\"App\">\n      <a className=\"github-link\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/destroymayor/unicode-to-utf8\">\n        GitHub\n      </a>\n      <TextArea\n        className=\"App-input\"\n        placeholder={\"Input Unicode\"}\n        rows={4}\n        value={encodeValue}\n        onChange={e => setEncodeValue(e.target.value)}\n      />\n      <TransformItem\n        unicodeToChar={() => setDecodeValue(unicodeToChar(encodeValue))}\n        charToUnicode={() => setEncodeValue(charToUnicode(decodeValue))}\n      />\n      <TextArea\n        className=\"App-input\"\n        placeholder={\"Result\"}\n        rows={4}\n        value={decodeValue}\n        onChange={e => setDecodeValue(e.target.value)}\n      />\n      <ClipboardButton decodeValue={decodeValue} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"index.css\";\nimport App from \"page/index\";\nimport * as serviceWorker from \"serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nif (module.hot) {\n  module.hot.accept(\"./\", () => {\n    ReactDOM.render(<App />, document.getElementById(\"root\"));\n  });\n}\n\nserviceWorker.unregister();\n"],"sourceRoot":""}