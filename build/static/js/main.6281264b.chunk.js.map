{"version":3,"sources":["utils/unicodeToChar.js","App.js","serviceWorker.js","index.js"],"names":["unicodeToChar","text","replace","match","String","fromCharCode","parseInt","TextArea","Input","App","useState","encodeValue","setEncodeValue","decodeValue","setDecodeValue","useClipboard","setCopied","useEffect","className","placeholder","rows","value","onChange","e","target","type","icon","onClick","message","error","success","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uOAMeA,EANO,SAAAC,GACpB,OAAOA,EAAKC,QAAQ,mBAAmB,SAAAC,GACrC,OAAOC,OAAOC,aAAaC,SAASH,EAAMD,QAAQ,OAAQ,IAAK,SCM3DK,EAAaC,IAAbD,SAqCOE,MAlCf,WAAgB,IAAD,EACyBC,mBAAS,IADlC,mBACNC,EADM,KACOC,EADP,OAEyBF,mBAAS,IAFlC,mBAENG,EAFM,KAEOC,EAFP,OAIiBC,YAAa,IAJ9B,mBAIIC,GAJJ,WAgBb,OAVAC,qBAAU,WACRH,EAAed,EAAcW,MAC5B,CAACA,IASF,yBAAKO,UAAU,OACb,kBAACX,EAAD,CACEW,UAAU,YACVC,YAAa,gBACbC,KAAM,EACNC,MAAOV,EACPW,SAAU,SAAAC,GAAC,OAAIX,EAAeW,EAAEC,OAAOH,UAEzC,kBAAC,IAAD,CAAMH,UAAU,WAAWO,KAAK,eAChC,kBAAClB,EAAD,CAAUW,UAAU,YAAYC,YAAa,SAAUC,KAAM,EAAGC,MAAOR,IACvE,kBAAC,IAAD,CAAQa,KAAK,OAAOC,QAjBA,WACtB,GAAoB,KAAhBd,EAAoB,OAAOe,IAAQC,MAAR,0BAC/Bb,EAAUH,GACVe,IAAQE,QAAR,mCAA4CjB,MAc1C,UC1BckB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS/B,MACvB,2DCZNgC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.6281264b.chunk.js","sourcesContent":["const unicodeToChar = text => {\n  return text.replace(/\\\\u[\\dA-F]{4}/gi, match => {\n    return String.fromCharCode(parseInt(match.replace(/\\\\u/g, \"\"), 16));\n  });\n};\n\nexport default unicodeToChar;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nimport { Button, Input, Icon, message } from \"antd\";\nimport useClipboard from \"react-use-clipboard\";\n\nimport unicodeToChar from \"utils/unicodeToChar\";\n\nconst { TextArea } = Input;\n\n// \\u4e0a\\u6d77\nfunction App() {\n  const [encodeValue, setEncodeValue] = useState(\"\");\n  const [decodeValue, setDecodeValue] = useState(\"\");\n\n  const [isCopied, setCopied] = useClipboard(\"\");\n\n  useEffect(() => {\n    setDecodeValue(unicodeToChar(encodeValue));\n  }, [encodeValue]);\n\n  const handleClipboard = () => {\n    if (decodeValue === \"\") return message.error(`Please enter something`);\n    setCopied(decodeValue);\n    message.success(`Your clipboard contains: ${decodeValue}`);\n  };\n\n  return (\n    <div className=\"App\">\n      <TextArea\n        className=\"App-input\"\n        placeholder={\"Input Unicode\"}\n        rows={4}\n        value={encodeValue}\n        onChange={e => setEncodeValue(e.target.value)}\n      />\n      <Icon className=\"App-icon\" type=\"arrow-down\" />\n      <TextArea className=\"App-input\" placeholder={\"Result\"} rows={4} value={decodeValue} />\n      <Button icon=\"copy\" onClick={handleClipboard}>\n        Copy\n      </Button>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"index.css\";\nimport App from \"App\";\nimport * as serviceWorker from \"serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nif (module.hot) {\n  module.hot.accept(\"./\", () => {\n    ReactDOM.render(<App />, document.getElementById(\"root\"));\n  });\n}\n\nserviceWorker.unregister();\n"],"sourceRoot":""}